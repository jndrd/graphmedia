/* modelos.vapi generated by valac 0.26.0, do not modify. */

namespace GraphMedia {
	namespace Modelos {
		[CCode (cheader_filename = "modelos.h")]
		public abstract class Album {
			public string descripcion;
			public int64 id;
			public string nombre;
			public Album ();
			public static GraphMedia.Modelos.AlbumCanciones cast_album_canciones (GraphMedia.Modelos.Album a);
			public static GraphMedia.Modelos.AlbumImagenes cast_album_imagenes (GraphMedia.Modelos.Album a);
			public bool es_valido ();
		}
		[CCode (cheader_filename = "modelos.h")]
		public class AlbumCanciones : GraphMedia.Modelos.Album {
			public Gee.ArrayList<GraphMedia.Modelos.Cancion> canciones;
			public string caratula;
			public double popularidad;
			public AlbumCanciones ();
			public void agregar (GraphMedia.Modelos.Cancion c);
		}
		[CCode (cheader_filename = "modelos.h")]
		public class AlbumImagenes : GraphMedia.Modelos.Album {
			public GraphMedia.Modelos.Epoca epoca;
			public Gee.ArrayList<GraphMedia.Modelos.Imagen> imagenes;
			public AlbumImagenes ();
			public void agregar_imagen (GraphMedia.Modelos.Imagen i);
			public new bool es_valido ();
		}
		[CCode (cheader_filename = "modelos.h")]
		public class AlbumsImagenes : GraphMedia.Modelos.Tablas, GraphMedia.Modelos.Filtrable {
			public GraphMedia.Modelos.AlbumImagenes agregar (GraphMedia.Modelos.AlbumImagenes album);
			public Gee.ArrayList<GraphMedia.Modelos.AlbumImagenes> buscar_albums_por_nombre (string nombre = "", int lim = 0);
			public bool editar (GraphMedia.Modelos.AlbumImagenes album);
			public GraphMedia.Modelos.AlbumImagenes eliminar (GraphMedia.Modelos.AlbumImagenes p) throws GraphMedia.Modelos.ErrorBaseDatos;
			public GraphMedia.Modelos.AlbumImagenes get_album_id (int64 id);
			public GraphMedia.Modelos.AlbumImagenes get_album_por_id (int64 id);
			public Gee.ArrayList<GraphMedia.Modelos.Album> get_albums (string where = "1", int limite = 0, string orden = "fecha");
			public static GraphMedia.Modelos.AlbumsImagenes get_instancia ();
			public int get_total_albums ();
		}
		[CCode (cheader_filename = "modelos.h")]
		public class AlbumsMusicales : GLib.Object, GraphMedia.Modelos.Filtrable {
			public bool agregar_cancion_album (GraphMedia.Modelos.Cancion c, GraphMedia.Modelos.AlbumCanciones album);
			public Gee.ArrayList<GraphMedia.Modelos.AlbumCanciones> buscar_albums_por_nombre (string nombre = "", int lim = 0);
			public bool editar (GraphMedia.Modelos.AlbumCanciones ac);
			public GraphMedia.Modelos.AlbumCanciones eliminar (GraphMedia.Modelos.AlbumCanciones ac);
			public bool eliminar_cancion_album (GraphMedia.Modelos.Cancion c, GraphMedia.Modelos.AlbumCanciones album);
			public GraphMedia.Modelos.AlbumCanciones get_album_por_id (int64 id);
			public static GraphMedia.Modelos.AlbumsMusicales get_instancia ();
			public int get_total_albums ();
			public void llenar_album_canciones (out GraphMedia.Modelos.AlbumCanciones ac);
			public GraphMedia.Modelos.AlbumCanciones registrar (GraphMedia.Modelos.AlbumCanciones ac);
		}
		[CCode (cheader_filename = "modelos.h")]
		[GtkTemplate (ui = "/org/gtk/graphmedia/window.ui")]
		public class AppGUI : Gtk.ApplicationWindow {
			public static GraphMedia.Modelos.Album album_actual;
			public static GraphMedia.Modelos.Archivo archivo_actual;
			public static int64 index_actual;
			public static GraphMedia.Modelos.Persona persona_actual;
			public const int TAM_ICONO;
			public AppGUI (Gtk.Application application);
			public void musica_registar_cancion ();
			[GtkCallback]
			public void on_next_clicked ();
			[GtkCallback]
			public void on_previous_clicked ();
			public void open (GLib.File file);
			[GtkCallback]
			public void search_text_changed ();
			[GtkCallback]
			public void visible_child_changed ();
		}
		[CCode (cheader_filename = "modelos.h")]
		[GtkTemplate (ui = "/org/gtk/graphmedia/prefs.ui")]
		public class AppPreferences : Gtk.Dialog {
			public AppPreferences (GraphMedia.Modelos.AppGUI window);
		}
		[CCode (cheader_filename = "modelos.h")]
		public class Archivo {
			public bool disponible;
			public int64 id;
			public string nombre;
			public double popularidad;
			public string tipo;
			public string u_acceso;
			public string ubicacion;
			public Archivo ();
			public void actualizar_u_acceso ();
			public static GraphMedia.Modelos.Cancion cast_cancion (GraphMedia.Modelos.Archivo a);
			public static GraphMedia.Modelos.Imagen cast_imagen (GraphMedia.Modelos.Archivo a);
			public bool es_valido ();
		}
		[CCode (cheader_filename = "modelos.h")]
		public class Artista : GraphMedia.Modelos.Persona {
			public Artista ();
		}
		[CCode (cheader_filename = "modelos.h")]
		public class Artistas : GraphMedia.Modelos.TablaPersonas, GraphMedia.Modelos.Filtrable {
			public new GraphMedia.Modelos.Artista agregar (GraphMedia.Modelos.Artista artista);
			public void agregar_album_artista (GraphMedia.Modelos.Artista artista, GraphMedia.Modelos.AlbumCanciones album);
			public Gee.ArrayList<GraphMedia.Modelos.Artista> buscar_artistas_por_nombre (string nombre, int lim = 0);
			public new bool editar (GraphMedia.Modelos.Artista artista);
			public new GraphMedia.Modelos.Artista eliminar (GraphMedia.Modelos.Artista artista);
			public Gee.ArrayList<GraphMedia.Modelos.Album> get_albums_artista (GraphMedia.Modelos.Artista artista);
			public GraphMedia.Modelos.Artista get_artista_por_id (int64 id) throws GLib.Error;
			public static GraphMedia.Modelos.Artistas get_instancia ();
			public int get_total_artistas ();
		}
		[CCode (cheader_filename = "modelos.h")]
		public class Cancion : GraphMedia.Modelos.Archivo {
			public string imagen;
			public Cancion ();
		}
		[CCode (cheader_filename = "modelos.h")]
		public class Canciones : GraphMedia.Modelos.TablaArchivo, GraphMedia.Modelos.Filtrable {
			public new GraphMedia.Modelos.Cancion agregar (GraphMedia.Modelos.Cancion cancion);
			public Gee.ArrayList<GraphMedia.Modelos.Cancion> buscar_canciones_por_nombre (string nombre, int limite = 0, string orden = "popularidad");
			public new bool editar (GraphMedia.Modelos.Cancion cancion);
			public new GraphMedia.Modelos.Cancion eliminar (GraphMedia.Modelos.Cancion cancion);
			public GraphMedia.Modelos.Cancion get_cancion_por_id (int64 id);
			public static new GraphMedia.Modelos.Canciones get_instancia ();
			public int get_total_canciones ();
		}
		[CCode (cheader_filename = "modelos.h")]
		[GtkTemplate (ui = "/org/gtk/graphmedia/dialogs.ui")]
		public class Dialogo : Gtk.Dialog {
			public Dialogo (GraphMedia.Modelos.AppGUI window, GraphMedia.Modelos.Persona p, bool generico);
			public GraphMedia.Modelos.Persona get_persona ();
			[GtkCallback]
			public void on_cambiar_imagen_clicked ();
			[GtkCallback]
			public void valida_persona ();
		}
		[CCode (cheader_filename = "modelos.h")]
		[GtkTemplate (ui = "/org/gtk/graphmedia/dialogoalbums.ui")]
		public class DialogoAlbum : Gtk.Dialog {
			public DialogoAlbum (GraphMedia.Modelos.AppGUI window, GraphMedia.Modelos.Album p, bool generico);
			public GraphMedia.Modelos.Album get_albums ();
			[GtkCallback]
			public void on_cambiar_imagen_clicked ();
			[GtkCallback]
			public void valida_albums ();
		}
		[CCode (cheader_filename = "modelos.h")]
		[GtkTemplate (ui = "/org/gtk/graphmedia/dialogoarchivo.ui")]
		public class DialogoArchivo : Gtk.Dialog {
			public DialogoArchivo (GraphMedia.Modelos.AppGUI window, GraphMedia.Modelos.Archivo p, bool generico);
			public GraphMedia.Modelos.Archivo get_archivo ();
			[GtkCallback]
			public void on_cambiar_imagen_clicked ();
			[GtkCallback]
			public void valida_archivo ();
		}
		[CCode (cheader_filename = "modelos.h")]
		public class GraphMediaApp : Gtk.Application {
			public static string ubicacion_bd;
			public GraphMediaApp ();
			public override void activate ();
			public override void open (GLib.File[] files, string hint);
			public override void startup ();
		}
		[CCode (cheader_filename = "modelos.h")]
		public class Imagen : GraphMedia.Modelos.Archivo {
			public Imagen ();
		}
		[CCode (cheader_filename = "modelos.h")]
		public class Imagenes : GraphMedia.Modelos.TablaArchivo, GraphMedia.Modelos.Filtrable {
			public new GraphMedia.Modelos.Imagen agregar (GraphMedia.Modelos.Imagen imagen);
			public Gee.ArrayList<GraphMedia.Modelos.Imagen> buscar_imagenes_por_nombre (string nombre = "", int limite = 0, string orden = "popularidad");
			public new bool editar (GraphMedia.Modelos.Imagen imagen);
			public new GraphMedia.Modelos.Imagen eliminar (GraphMedia.Modelos.Imagen imagen);
			public GraphMedia.Modelos.Imagen get_imagen_por_id (int64 id);
			public static new GraphMedia.Modelos.Imagenes get_instancia ();
			public int get_total_imagenes ();
		}
		[CCode (cheader_filename = "modelos.h")]
		public class Persona {
			public int edad;
			public int64 id;
			public string imagen;
			public string nacionalidad;
			public string nombre;
			public double popularidad;
			public string rol;
			public Persona ();
			public static GraphMedia.Modelos.Artista cast_artista (GraphMedia.Modelos.Persona p);
			public bool es_valida ();
		}
		[CCode (cheader_filename = "modelos.h")]
		protected class PersonaArchivo : GraphMedia.Modelos.Relacion {
			protected PersonaArchivo ();
			protected Gee.ArrayList<GraphMedia.Modelos.Archivo> archivos_por_persona (GraphMedia.Modelos.Persona p);
			protected void eliminar_relaciones_archivo (GraphMedia.Modelos.Archivo archivo);
			protected void eliminar_relaciones_persona (GraphMedia.Modelos.Persona persona);
			protected static GraphMedia.Modelos.PersonaArchivo get_instancia ();
			protected int n_archivos_por_persona (GraphMedia.Modelos.Persona persona);
			protected int n_personas_por_archivo (GraphMedia.Modelos.Archivo archivo);
			protected void relaciona (GraphMedia.Modelos.Persona persona, GraphMedia.Modelos.Archivo cancion);
		}
		[CCode (cheader_filename = "modelos.h")]
		public abstract class Relacion : GraphMedia.Modelos.Tablas {
			protected string llave;
			protected string puerta;
			protected string tabla_llave;
			protected string tabla_puerta;
			public Relacion ();
			protected bool eliminar_relacion (int64 id_llave, int64 id_puerta);
			protected void eliminar_relaciones_id (int64 id);
			protected void eliminar_relaciones_secundarias_id (int64 id);
			protected bool relaciona_ids (int64 id1, int64 id2);
			protected void set_llave (string columna);
			protected void set_puerta (string columna);
			protected void set_tabla_llave (string columna);
			protected void set_tabla_puerta (string columna);
			protected int total_relaciones_llave (int64 id);
			protected int total_relaciones_puerta (int64 id);
		}
		[CCode (cheader_filename = "modelos.h")]
		public class Sentimiento {
			public string descripcion;
			public int64 id;
			public string nombre;
			public Sentimiento ();
			public bool es_valido ();
		}
		[CCode (cheader_filename = "modelos.h")]
		public class Sentimientos : GraphMedia.Modelos.Tablas, GraphMedia.Modelos.Filtrable {
			public GraphMedia.Modelos.Sentimiento agregar (GraphMedia.Modelos.Sentimiento sentimiento);
			public bool editar (GraphMedia.Modelos.Sentimiento sentimiento);
			public GraphMedia.Modelos.Sentimiento eliminar (GraphMedia.Modelos.Sentimiento p) throws GraphMedia.Modelos.ErrorBaseDatos;
			public static GraphMedia.Modelos.Sentimientos get_instancia ();
			public GraphMedia.Modelos.Sentimiento get_sentimiento_por_id (int64 id);
			public int get_total_sentimientos ();
			public Gee.ArrayList<GraphMedia.Modelos.Sentimiento> lista_sentimientos ();
		}
		[CCode (cheader_filename = "modelos.h")]
		protected class TablaArchivo : GraphMedia.Modelos.Tablas {
			protected TablaArchivo ();
			protected GraphMedia.Modelos.Archivo agregar (GraphMedia.Modelos.Archivo archivo);
			protected Gee.List<GraphMedia.Modelos.Archivo> buscar (string where);
			protected bool editar (GraphMedia.Modelos.Archivo p);
			protected GraphMedia.Modelos.Archivo eliminar (GraphMedia.Modelos.Archivo p) throws GraphMedia.Modelos.ErrorBaseDatos;
			protected GraphMedia.Modelos.Archivo get_archivo_id (int64 id);
			protected Gee.ArrayList<GraphMedia.Modelos.Archivo> get_archivos (string where = "1", int limite = 0, string orden = "popularidad");
			protected static GraphMedia.Modelos.TablaArchivo get_instancia ();
			protected int get_total_archivos ();
			protected int get_total_tipo (string tipo);
		}
		[CCode (cheader_filename = "modelos.h")]
		public class TablaPersonas : GraphMedia.Modelos.Tablas {
			protected TablaPersonas ();
			protected GraphMedia.Modelos.Persona agregar (GraphMedia.Modelos.Persona persona);
			protected bool editar (GraphMedia.Modelos.Persona p);
			protected GraphMedia.Modelos.Persona eliminar (GraphMedia.Modelos.Persona p) throws GraphMedia.Modelos.ErrorBaseDatos;
			protected static GraphMedia.Modelos.TablaPersonas get_instancia ();
			protected GraphMedia.Modelos.Persona get_persona_id (int64 id);
			protected Gee.ArrayList<GraphMedia.Modelos.Persona> get_personas (string where = "1", int limite = 0, string orden = "popularidad");
			protected int get_total_personas ();
		}
		[CCode (cheader_filename = "modelos.h")]
		public abstract class Tablas : GLib.Object {
			protected static Sqlite.Database bd;
			public string nombre_tabla;
			public Tablas ();
			protected bool actualizar_celda_por_id (int64 id, string columnas);
			protected bool buscar_celdas (string colunmnas, string condiciones, out Sqlite.Statement query);
			protected bool eliminar_celda_por_id (int64 id);
			protected bool existe_id (int64 id);
			protected int get_total_celdas (string columna = "1");
			public static void inicializar (string archivo);
			protected bool insertar_celda (string columnas, string valores, out Sqlite.Statement query);
			protected void set_nombre_tabla (string nombre_tabla);
		}
		[CCode (cheader_filename = "modelos.h")]
		public interface Filtrable : GLib.Object {
			public Gdk.Pixbuf cargar_icono_ubicacion (string ubicacion, int h, int w);
			public abstract Gtk.IconView filtrar (string consulta, int lim);
		}
		[CCode (cheader_filename = "modelos.h")]
		public struct Epoca {
			public GLib.DateTime fecha;
			public Epoca (int dia, int mes, int anio);
			public Epoca.cadena (string iso8601);
			public bool mismo_anio (GraphMedia.Modelos.Epoca b);
			public bool mismo_dia (GraphMedia.Modelos.Epoca b);
			public bool mismo_mes (GraphMedia.Modelos.Epoca b);
			public string to_string ();
		}
		[CCode (cheader_filename = "modelos.h")]
		public errordomain ErrorArchivo {
			NO_ENCONTRADO
		}
		[CCode (cheader_filename = "modelos.h")]
		public errordomain ErrorBD {
			NO_EXISTE
		}
		[CCode (cheader_filename = "modelos.h")]
		public errordomain ErrorBaseDatos {
			ARCHIVO_NO_ENCONTRADO,
			ARCHIVO_INVALIDO,
			CONSULTA
		}
	}
	[CCode (cheader_filename = "modelos.h")]
	public class BaseDatos {
		public BaseDatos ();
		public GraphMedia.Modelos.AlbumsImagenes get_albums_imagenes ();
		public GraphMedia.Modelos.AlbumsMusicales get_albums_musicales ();
		public GraphMedia.Modelos.Artistas get_artistas ();
		public GraphMedia.Modelos.Canciones get_canciones ();
		public GraphMedia.Modelos.Imagenes get_imagenes ();
		public GraphMedia.Modelos.Sentimientos get_sentimientos ();
		public void inicializar ();
		public void seleccionar_archivo (string archivo);
	}
	[CCode (cheader_filename = "modelos.h")]
	public class Generador : GLib.Object {
		public Generador (string ruta_diccionario);
		public GraphMedia.Modelos.AlbumCanciones album_canciones_aleatorio ();
		public GraphMedia.Modelos.AlbumImagenes album_imagenes_aleatorio (int imagenes = 10);
		public GraphMedia.Modelos.Artista artista_aleatorio ();
		public GraphMedia.Modelos.Cancion cancion_aleatoria ();
		public static string caratula_aleatoria ();
		public int edad_aleatoria ();
		public GraphMedia.Modelos.Imagen imagen_aleatoria ();
		public Gdk.Pixbuf imagen_aleatoria_real (int h, int w);
		public string nombre_aleatorio (int longitud = 2);
		public string palabra_aleatoria ();
		public GraphMedia.Modelos.Persona persona_aleatoria ();
		public string rol_aleatorio ();
		public string ruta_aleatoria (int longitud = 3);
		public GraphMedia.Modelos.Sentimiento sentimiento_aleatorio ();
	}
}
