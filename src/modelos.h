/* modelos.h generated by valac 0.26.0, the Vala compiler, do not modify */


#ifndef __SRC_MODELOS_H__
#define __SRC_MODELOS_H__

#include <glib.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <glib-object.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <sqlite3.h>
#include <float.h>
#include <math.h>
#include <gee.h>

G_BEGIN_DECLS


#define GRAPH_MEDIA_MODELOS_TYPE_GRAPH_MEDIA_APP (graph_media_modelos_graph_media_app_get_type ())
#define GRAPH_MEDIA_MODELOS_GRAPH_MEDIA_APP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_GRAPH_MEDIA_APP, GraphMediaModelosGraphMediaApp))
#define GRAPH_MEDIA_MODELOS_GRAPH_MEDIA_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_GRAPH_MEDIA_APP, GraphMediaModelosGraphMediaAppClass))
#define GRAPH_MEDIA_MODELOS_IS_GRAPH_MEDIA_APP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_GRAPH_MEDIA_APP))
#define GRAPH_MEDIA_MODELOS_IS_GRAPH_MEDIA_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_GRAPH_MEDIA_APP))
#define GRAPH_MEDIA_MODELOS_GRAPH_MEDIA_APP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_GRAPH_MEDIA_APP, GraphMediaModelosGraphMediaAppClass))

typedef struct _GraphMediaModelosGraphMediaApp GraphMediaModelosGraphMediaApp;
typedef struct _GraphMediaModelosGraphMediaAppClass GraphMediaModelosGraphMediaAppClass;
typedef struct _GraphMediaModelosGraphMediaAppPrivate GraphMediaModelosGraphMediaAppPrivate;

#define GRAPH_MEDIA_MODELOS_TYPE_APP_GUI (graph_media_modelos_app_gui_get_type ())
#define GRAPH_MEDIA_MODELOS_APP_GUI(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_APP_GUI, GraphMediaModelosAppGUI))
#define GRAPH_MEDIA_MODELOS_APP_GUI_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_APP_GUI, GraphMediaModelosAppGUIClass))
#define GRAPH_MEDIA_MODELOS_IS_APP_GUI(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_APP_GUI))
#define GRAPH_MEDIA_MODELOS_IS_APP_GUI_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_APP_GUI))
#define GRAPH_MEDIA_MODELOS_APP_GUI_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_APP_GUI, GraphMediaModelosAppGUIClass))

typedef struct _GraphMediaModelosAppGUI GraphMediaModelosAppGUI;
typedef struct _GraphMediaModelosAppGUIClass GraphMediaModelosAppGUIClass;
typedef struct _GraphMediaModelosAppGUIPrivate GraphMediaModelosAppGUIPrivate;

#define GRAPH_MEDIA_MODELOS_TYPE_PERSONA (graph_media_modelos_persona_get_type ())
#define GRAPH_MEDIA_MODELOS_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_PERSONA, GraphMediaModelosPersona))
#define GRAPH_MEDIA_MODELOS_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_PERSONA, GraphMediaModelosPersonaClass))
#define GRAPH_MEDIA_MODELOS_IS_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_PERSONA))
#define GRAPH_MEDIA_MODELOS_IS_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_PERSONA))
#define GRAPH_MEDIA_MODELOS_PERSONA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_PERSONA, GraphMediaModelosPersonaClass))

typedef struct _GraphMediaModelosPersona GraphMediaModelosPersona;
typedef struct _GraphMediaModelosPersonaClass GraphMediaModelosPersonaClass;

#define GRAPH_MEDIA_MODELOS_TYPE_ALBUM (graph_media_modelos_album_get_type ())
#define GRAPH_MEDIA_MODELOS_ALBUM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUM, GraphMediaModelosAlbum))
#define GRAPH_MEDIA_MODELOS_ALBUM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_ALBUM, GraphMediaModelosAlbumClass))
#define GRAPH_MEDIA_MODELOS_IS_ALBUM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUM))
#define GRAPH_MEDIA_MODELOS_IS_ALBUM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_ALBUM))
#define GRAPH_MEDIA_MODELOS_ALBUM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUM, GraphMediaModelosAlbumClass))

typedef struct _GraphMediaModelosAlbum GraphMediaModelosAlbum;
typedef struct _GraphMediaModelosAlbumClass GraphMediaModelosAlbumClass;

#define GRAPH_MEDIA_MODELOS_TYPE_ARCHIVO (graph_media_modelos_archivo_get_type ())
#define GRAPH_MEDIA_MODELOS_ARCHIVO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_ARCHIVO, GraphMediaModelosArchivo))
#define GRAPH_MEDIA_MODELOS_ARCHIVO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_ARCHIVO, GraphMediaModelosArchivoClass))
#define GRAPH_MEDIA_MODELOS_IS_ARCHIVO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_ARCHIVO))
#define GRAPH_MEDIA_MODELOS_IS_ARCHIVO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_ARCHIVO))
#define GRAPH_MEDIA_MODELOS_ARCHIVO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_ARCHIVO, GraphMediaModelosArchivoClass))

typedef struct _GraphMediaModelosArchivo GraphMediaModelosArchivo;
typedef struct _GraphMediaModelosArchivoClass GraphMediaModelosArchivoClass;

#define GRAPH_MEDIA_MODELOS_TYPE_FILTRABLE (graph_media_modelos_filtrable_get_type ())
#define GRAPH_MEDIA_MODELOS_FILTRABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_FILTRABLE, GraphMediaModelosFiltrable))
#define GRAPH_MEDIA_MODELOS_IS_FILTRABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_FILTRABLE))
#define GRAPH_MEDIA_MODELOS_FILTRABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GRAPH_MEDIA_MODELOS_TYPE_FILTRABLE, GraphMediaModelosFiltrableIface))

typedef struct _GraphMediaModelosFiltrable GraphMediaModelosFiltrable;
typedef struct _GraphMediaModelosFiltrableIface GraphMediaModelosFiltrableIface;

#define GRAPH_MEDIA_MODELOS_TYPE_APP_PREFERENCES (graph_media_modelos_app_preferences_get_type ())
#define GRAPH_MEDIA_MODELOS_APP_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_APP_PREFERENCES, GraphMediaModelosAppPreferences))
#define GRAPH_MEDIA_MODELOS_APP_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_APP_PREFERENCES, GraphMediaModelosAppPreferencesClass))
#define GRAPH_MEDIA_MODELOS_IS_APP_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_APP_PREFERENCES))
#define GRAPH_MEDIA_MODELOS_IS_APP_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_APP_PREFERENCES))
#define GRAPH_MEDIA_MODELOS_APP_PREFERENCES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_APP_PREFERENCES, GraphMediaModelosAppPreferencesClass))

typedef struct _GraphMediaModelosAppPreferences GraphMediaModelosAppPreferences;
typedef struct _GraphMediaModelosAppPreferencesClass GraphMediaModelosAppPreferencesClass;
typedef struct _GraphMediaModelosAppPreferencesPrivate GraphMediaModelosAppPreferencesPrivate;

#define GRAPH_MEDIA_MODELOS_TYPE_DIALOGO (graph_media_modelos_dialogo_get_type ())
#define GRAPH_MEDIA_MODELOS_DIALOGO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO, GraphMediaModelosDialogo))
#define GRAPH_MEDIA_MODELOS_DIALOGO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO, GraphMediaModelosDialogoClass))
#define GRAPH_MEDIA_MODELOS_IS_DIALOGO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO))
#define GRAPH_MEDIA_MODELOS_IS_DIALOGO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO))
#define GRAPH_MEDIA_MODELOS_DIALOGO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO, GraphMediaModelosDialogoClass))

typedef struct _GraphMediaModelosDialogo GraphMediaModelosDialogo;
typedef struct _GraphMediaModelosDialogoClass GraphMediaModelosDialogoClass;
typedef struct _GraphMediaModelosDialogoPrivate GraphMediaModelosDialogoPrivate;

#define GRAPH_MEDIA_MODELOS_TYPE_DIALOGO_ALBUM (graph_media_modelos_dialogo_album_get_type ())
#define GRAPH_MEDIA_MODELOS_DIALOGO_ALBUM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO_ALBUM, GraphMediaModelosDialogoAlbum))
#define GRAPH_MEDIA_MODELOS_DIALOGO_ALBUM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO_ALBUM, GraphMediaModelosDialogoAlbumClass))
#define GRAPH_MEDIA_MODELOS_IS_DIALOGO_ALBUM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO_ALBUM))
#define GRAPH_MEDIA_MODELOS_IS_DIALOGO_ALBUM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO_ALBUM))
#define GRAPH_MEDIA_MODELOS_DIALOGO_ALBUM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO_ALBUM, GraphMediaModelosDialogoAlbumClass))

typedef struct _GraphMediaModelosDialogoAlbum GraphMediaModelosDialogoAlbum;
typedef struct _GraphMediaModelosDialogoAlbumClass GraphMediaModelosDialogoAlbumClass;
typedef struct _GraphMediaModelosDialogoAlbumPrivate GraphMediaModelosDialogoAlbumPrivate;

#define GRAPH_MEDIA_MODELOS_TYPE_DIALOGO_ARCHIVO (graph_media_modelos_dialogo_archivo_get_type ())
#define GRAPH_MEDIA_MODELOS_DIALOGO_ARCHIVO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO_ARCHIVO, GraphMediaModelosDialogoArchivo))
#define GRAPH_MEDIA_MODELOS_DIALOGO_ARCHIVO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO_ARCHIVO, GraphMediaModelosDialogoArchivoClass))
#define GRAPH_MEDIA_MODELOS_IS_DIALOGO_ARCHIVO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO_ARCHIVO))
#define GRAPH_MEDIA_MODELOS_IS_DIALOGO_ARCHIVO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO_ARCHIVO))
#define GRAPH_MEDIA_MODELOS_DIALOGO_ARCHIVO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_DIALOGO_ARCHIVO, GraphMediaModelosDialogoArchivoClass))

typedef struct _GraphMediaModelosDialogoArchivo GraphMediaModelosDialogoArchivo;
typedef struct _GraphMediaModelosDialogoArchivoClass GraphMediaModelosDialogoArchivoClass;
typedef struct _GraphMediaModelosDialogoArchivoPrivate GraphMediaModelosDialogoArchivoPrivate;

#define GRAPH_MEDIA_TYPE_BASE_DATOS (graph_media_base_datos_get_type ())
#define GRAPH_MEDIA_BASE_DATOS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_TYPE_BASE_DATOS, GraphMediaBaseDatos))
#define GRAPH_MEDIA_BASE_DATOS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_TYPE_BASE_DATOS, GraphMediaBaseDatosClass))
#define GRAPH_MEDIA_IS_BASE_DATOS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_TYPE_BASE_DATOS))
#define GRAPH_MEDIA_IS_BASE_DATOS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_TYPE_BASE_DATOS))
#define GRAPH_MEDIA_BASE_DATOS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_TYPE_BASE_DATOS, GraphMediaBaseDatosClass))

typedef struct _GraphMediaBaseDatos GraphMediaBaseDatos;
typedef struct _GraphMediaBaseDatosClass GraphMediaBaseDatosClass;
typedef struct _GraphMediaBaseDatosPrivate GraphMediaBaseDatosPrivate;

#define GRAPH_MEDIA_MODELOS_TYPE_TABLAS (graph_media_modelos_tablas_get_type ())
#define GRAPH_MEDIA_MODELOS_TABLAS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_TABLAS, GraphMediaModelosTablas))
#define GRAPH_MEDIA_MODELOS_TABLAS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_TABLAS, GraphMediaModelosTablasClass))
#define GRAPH_MEDIA_MODELOS_IS_TABLAS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_TABLAS))
#define GRAPH_MEDIA_MODELOS_IS_TABLAS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_TABLAS))
#define GRAPH_MEDIA_MODELOS_TABLAS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_TABLAS, GraphMediaModelosTablasClass))

typedef struct _GraphMediaModelosTablas GraphMediaModelosTablas;
typedef struct _GraphMediaModelosTablasClass GraphMediaModelosTablasClass;

#define GRAPH_MEDIA_MODELOS_TYPE_TABLA_PERSONAS (graph_media_modelos_tabla_personas_get_type ())
#define GRAPH_MEDIA_MODELOS_TABLA_PERSONAS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_TABLA_PERSONAS, GraphMediaModelosTablaPersonas))
#define GRAPH_MEDIA_MODELOS_TABLA_PERSONAS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_TABLA_PERSONAS, GraphMediaModelosTablaPersonasClass))
#define GRAPH_MEDIA_MODELOS_IS_TABLA_PERSONAS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_TABLA_PERSONAS))
#define GRAPH_MEDIA_MODELOS_IS_TABLA_PERSONAS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_TABLA_PERSONAS))
#define GRAPH_MEDIA_MODELOS_TABLA_PERSONAS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_TABLA_PERSONAS, GraphMediaModelosTablaPersonasClass))

typedef struct _GraphMediaModelosTablaPersonas GraphMediaModelosTablaPersonas;
typedef struct _GraphMediaModelosTablaPersonasClass GraphMediaModelosTablaPersonasClass;

#define GRAPH_MEDIA_MODELOS_TYPE_ARTISTAS (graph_media_modelos_artistas_get_type ())
#define GRAPH_MEDIA_MODELOS_ARTISTAS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_ARTISTAS, GraphMediaModelosArtistas))
#define GRAPH_MEDIA_MODELOS_ARTISTAS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_ARTISTAS, GraphMediaModelosArtistasClass))
#define GRAPH_MEDIA_MODELOS_IS_ARTISTAS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_ARTISTAS))
#define GRAPH_MEDIA_MODELOS_IS_ARTISTAS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_ARTISTAS))
#define GRAPH_MEDIA_MODELOS_ARTISTAS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_ARTISTAS, GraphMediaModelosArtistasClass))

typedef struct _GraphMediaModelosArtistas GraphMediaModelosArtistas;
typedef struct _GraphMediaModelosArtistasClass GraphMediaModelosArtistasClass;

#define GRAPH_MEDIA_MODELOS_TYPE_ALBUMS_MUSICALES (graph_media_modelos_albums_musicales_get_type ())
#define GRAPH_MEDIA_MODELOS_ALBUMS_MUSICALES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUMS_MUSICALES, GraphMediaModelosAlbumsMusicales))
#define GRAPH_MEDIA_MODELOS_ALBUMS_MUSICALES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_ALBUMS_MUSICALES, GraphMediaModelosAlbumsMusicalesClass))
#define GRAPH_MEDIA_MODELOS_IS_ALBUMS_MUSICALES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUMS_MUSICALES))
#define GRAPH_MEDIA_MODELOS_IS_ALBUMS_MUSICALES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_ALBUMS_MUSICALES))
#define GRAPH_MEDIA_MODELOS_ALBUMS_MUSICALES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUMS_MUSICALES, GraphMediaModelosAlbumsMusicalesClass))

typedef struct _GraphMediaModelosAlbumsMusicales GraphMediaModelosAlbumsMusicales;
typedef struct _GraphMediaModelosAlbumsMusicalesClass GraphMediaModelosAlbumsMusicalesClass;

#define GRAPH_MEDIA_MODELOS_TYPE_ALBUMS_IMAGENES (graph_media_modelos_albums_imagenes_get_type ())
#define GRAPH_MEDIA_MODELOS_ALBUMS_IMAGENES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUMS_IMAGENES, GraphMediaModelosAlbumsImagenes))
#define GRAPH_MEDIA_MODELOS_ALBUMS_IMAGENES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_ALBUMS_IMAGENES, GraphMediaModelosAlbumsImagenesClass))
#define GRAPH_MEDIA_MODELOS_IS_ALBUMS_IMAGENES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUMS_IMAGENES))
#define GRAPH_MEDIA_MODELOS_IS_ALBUMS_IMAGENES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_ALBUMS_IMAGENES))
#define GRAPH_MEDIA_MODELOS_ALBUMS_IMAGENES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUMS_IMAGENES, GraphMediaModelosAlbumsImagenesClass))

typedef struct _GraphMediaModelosAlbumsImagenes GraphMediaModelosAlbumsImagenes;
typedef struct _GraphMediaModelosAlbumsImagenesClass GraphMediaModelosAlbumsImagenesClass;

#define GRAPH_MEDIA_MODELOS_TYPE_SENTIMIENTOS (graph_media_modelos_sentimientos_get_type ())
#define GRAPH_MEDIA_MODELOS_SENTIMIENTOS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_SENTIMIENTOS, GraphMediaModelosSentimientos))
#define GRAPH_MEDIA_MODELOS_SENTIMIENTOS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_SENTIMIENTOS, GraphMediaModelosSentimientosClass))
#define GRAPH_MEDIA_MODELOS_IS_SENTIMIENTOS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_SENTIMIENTOS))
#define GRAPH_MEDIA_MODELOS_IS_SENTIMIENTOS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_SENTIMIENTOS))
#define GRAPH_MEDIA_MODELOS_SENTIMIENTOS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_SENTIMIENTOS, GraphMediaModelosSentimientosClass))

typedef struct _GraphMediaModelosSentimientos GraphMediaModelosSentimientos;
typedef struct _GraphMediaModelosSentimientosClass GraphMediaModelosSentimientosClass;

#define GRAPH_MEDIA_MODELOS_TYPE_TABLA_ARCHIVO (graph_media_modelos_tabla_archivo_get_type ())
#define GRAPH_MEDIA_MODELOS_TABLA_ARCHIVO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_TABLA_ARCHIVO, GraphMediaModelosTablaArchivo))
#define GRAPH_MEDIA_MODELOS_TABLA_ARCHIVO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_TABLA_ARCHIVO, GraphMediaModelosTablaArchivoClass))
#define GRAPH_MEDIA_MODELOS_IS_TABLA_ARCHIVO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_TABLA_ARCHIVO))
#define GRAPH_MEDIA_MODELOS_IS_TABLA_ARCHIVO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_TABLA_ARCHIVO))
#define GRAPH_MEDIA_MODELOS_TABLA_ARCHIVO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_TABLA_ARCHIVO, GraphMediaModelosTablaArchivoClass))

typedef struct _GraphMediaModelosTablaArchivo GraphMediaModelosTablaArchivo;
typedef struct _GraphMediaModelosTablaArchivoClass GraphMediaModelosTablaArchivoClass;

#define GRAPH_MEDIA_MODELOS_TYPE_CANCIONES (graph_media_modelos_canciones_get_type ())
#define GRAPH_MEDIA_MODELOS_CANCIONES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_CANCIONES, GraphMediaModelosCanciones))
#define GRAPH_MEDIA_MODELOS_CANCIONES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_CANCIONES, GraphMediaModelosCancionesClass))
#define GRAPH_MEDIA_MODELOS_IS_CANCIONES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_CANCIONES))
#define GRAPH_MEDIA_MODELOS_IS_CANCIONES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_CANCIONES))
#define GRAPH_MEDIA_MODELOS_CANCIONES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_CANCIONES, GraphMediaModelosCancionesClass))

typedef struct _GraphMediaModelosCanciones GraphMediaModelosCanciones;
typedef struct _GraphMediaModelosCancionesClass GraphMediaModelosCancionesClass;

#define GRAPH_MEDIA_MODELOS_TYPE_IMAGENES (graph_media_modelos_imagenes_get_type ())
#define GRAPH_MEDIA_MODELOS_IMAGENES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_IMAGENES, GraphMediaModelosImagenes))
#define GRAPH_MEDIA_MODELOS_IMAGENES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_IMAGENES, GraphMediaModelosImagenesClass))
#define GRAPH_MEDIA_MODELOS_IS_IMAGENES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_IMAGENES))
#define GRAPH_MEDIA_MODELOS_IS_IMAGENES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_IMAGENES))
#define GRAPH_MEDIA_MODELOS_IMAGENES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_IMAGENES, GraphMediaModelosImagenesClass))

typedef struct _GraphMediaModelosImagenes GraphMediaModelosImagenes;
typedef struct _GraphMediaModelosImagenesClass GraphMediaModelosImagenesClass;
typedef struct _GraphMediaModelosTablasPrivate GraphMediaModelosTablasPrivate;

#define GRAPH_MEDIA_MODELOS_TYPE_RELACION (graph_media_modelos_relacion_get_type ())
#define GRAPH_MEDIA_MODELOS_RELACION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_RELACION, GraphMediaModelosRelacion))
#define GRAPH_MEDIA_MODELOS_RELACION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_RELACION, GraphMediaModelosRelacionClass))
#define GRAPH_MEDIA_MODELOS_IS_RELACION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_RELACION))
#define GRAPH_MEDIA_MODELOS_IS_RELACION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_RELACION))
#define GRAPH_MEDIA_MODELOS_RELACION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_RELACION, GraphMediaModelosRelacionClass))

typedef struct _GraphMediaModelosRelacion GraphMediaModelosRelacion;
typedef struct _GraphMediaModelosRelacionClass GraphMediaModelosRelacionClass;
typedef struct _GraphMediaModelosRelacionPrivate GraphMediaModelosRelacionPrivate;
typedef struct _GraphMediaModelosPersonaPrivate GraphMediaModelosPersonaPrivate;

#define GRAPH_MEDIA_MODELOS_TYPE_ARTISTA (graph_media_modelos_artista_get_type ())
#define GRAPH_MEDIA_MODELOS_ARTISTA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_ARTISTA, GraphMediaModelosArtista))
#define GRAPH_MEDIA_MODELOS_ARTISTA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_ARTISTA, GraphMediaModelosArtistaClass))
#define GRAPH_MEDIA_MODELOS_IS_ARTISTA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_ARTISTA))
#define GRAPH_MEDIA_MODELOS_IS_ARTISTA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_ARTISTA))
#define GRAPH_MEDIA_MODELOS_ARTISTA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_ARTISTA, GraphMediaModelosArtistaClass))

typedef struct _GraphMediaModelosArtista GraphMediaModelosArtista;
typedef struct _GraphMediaModelosArtistaClass GraphMediaModelosArtistaClass;
typedef struct _GraphMediaModelosTablaPersonasPrivate GraphMediaModelosTablaPersonasPrivate;

#define GRAPH_MEDIA_MODELOS_TYPE_PERSONA_ARCHIVO (graph_media_modelos_persona_archivo_get_type ())
#define GRAPH_MEDIA_MODELOS_PERSONA_ARCHIVO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_PERSONA_ARCHIVO, GraphMediaModelosPersonaArchivo))
#define GRAPH_MEDIA_MODELOS_PERSONA_ARCHIVO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_PERSONA_ARCHIVO, GraphMediaModelosPersonaArchivoClass))
#define GRAPH_MEDIA_MODELOS_IS_PERSONA_ARCHIVO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_PERSONA_ARCHIVO))
#define GRAPH_MEDIA_MODELOS_IS_PERSONA_ARCHIVO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_PERSONA_ARCHIVO))
#define GRAPH_MEDIA_MODELOS_PERSONA_ARCHIVO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_PERSONA_ARCHIVO, GraphMediaModelosPersonaArchivoClass))

typedef struct _GraphMediaModelosPersonaArchivo GraphMediaModelosPersonaArchivo;
typedef struct _GraphMediaModelosPersonaArchivoClass GraphMediaModelosPersonaArchivoClass;
typedef struct _GraphMediaModelosPersonaArchivoPrivate GraphMediaModelosPersonaArchivoPrivate;
typedef struct _GraphMediaModelosArtistaPrivate GraphMediaModelosArtistaPrivate;
typedef struct _GraphMediaModelosArtistasPrivate GraphMediaModelosArtistasPrivate;

#define GRAPH_MEDIA_MODELOS_TYPE_ALBUM_CANCIONES (graph_media_modelos_album_canciones_get_type ())
#define GRAPH_MEDIA_MODELOS_ALBUM_CANCIONES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUM_CANCIONES, GraphMediaModelosAlbumCanciones))
#define GRAPH_MEDIA_MODELOS_ALBUM_CANCIONES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_ALBUM_CANCIONES, GraphMediaModelosAlbumCancionesClass))
#define GRAPH_MEDIA_MODELOS_IS_ALBUM_CANCIONES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUM_CANCIONES))
#define GRAPH_MEDIA_MODELOS_IS_ALBUM_CANCIONES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_ALBUM_CANCIONES))
#define GRAPH_MEDIA_MODELOS_ALBUM_CANCIONES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUM_CANCIONES, GraphMediaModelosAlbumCancionesClass))

typedef struct _GraphMediaModelosAlbumCanciones GraphMediaModelosAlbumCanciones;
typedef struct _GraphMediaModelosAlbumCancionesClass GraphMediaModelosAlbumCancionesClass;
typedef struct _GraphMediaModelosArchivoPrivate GraphMediaModelosArchivoPrivate;

#define GRAPH_MEDIA_MODELOS_TYPE_CANCION (graph_media_modelos_cancion_get_type ())
#define GRAPH_MEDIA_MODELOS_CANCION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_CANCION, GraphMediaModelosCancion))
#define GRAPH_MEDIA_MODELOS_CANCION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_CANCION, GraphMediaModelosCancionClass))
#define GRAPH_MEDIA_MODELOS_IS_CANCION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_CANCION))
#define GRAPH_MEDIA_MODELOS_IS_CANCION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_CANCION))
#define GRAPH_MEDIA_MODELOS_CANCION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_CANCION, GraphMediaModelosCancionClass))

typedef struct _GraphMediaModelosCancion GraphMediaModelosCancion;
typedef struct _GraphMediaModelosCancionClass GraphMediaModelosCancionClass;

#define GRAPH_MEDIA_MODELOS_TYPE_IMAGEN (graph_media_modelos_imagen_get_type ())
#define GRAPH_MEDIA_MODELOS_IMAGEN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_IMAGEN, GraphMediaModelosImagen))
#define GRAPH_MEDIA_MODELOS_IMAGEN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_IMAGEN, GraphMediaModelosImagenClass))
#define GRAPH_MEDIA_MODELOS_IS_IMAGEN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_IMAGEN))
#define GRAPH_MEDIA_MODELOS_IS_IMAGEN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_IMAGEN))
#define GRAPH_MEDIA_MODELOS_IMAGEN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_IMAGEN, GraphMediaModelosImagenClass))

typedef struct _GraphMediaModelosImagen GraphMediaModelosImagen;
typedef struct _GraphMediaModelosImagenClass GraphMediaModelosImagenClass;
typedef struct _GraphMediaModelosTablaArchivoPrivate GraphMediaModelosTablaArchivoPrivate;
typedef struct _GraphMediaModelosCancionPrivate GraphMediaModelosCancionPrivate;
typedef struct _GraphMediaModelosCancionesPrivate GraphMediaModelosCancionesPrivate;
typedef struct _GraphMediaModelosImagenPrivate GraphMediaModelosImagenPrivate;
typedef struct _GraphMediaModelosImagenesPrivate GraphMediaModelosImagenesPrivate;
typedef struct _GraphMediaModelosAlbumPrivate GraphMediaModelosAlbumPrivate;

#define GRAPH_MEDIA_MODELOS_TYPE_ALBUM_IMAGENES (graph_media_modelos_album_imagenes_get_type ())
#define GRAPH_MEDIA_MODELOS_ALBUM_IMAGENES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUM_IMAGENES, GraphMediaModelosAlbumImagenes))
#define GRAPH_MEDIA_MODELOS_ALBUM_IMAGENES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_ALBUM_IMAGENES, GraphMediaModelosAlbumImagenesClass))
#define GRAPH_MEDIA_MODELOS_IS_ALBUM_IMAGENES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUM_IMAGENES))
#define GRAPH_MEDIA_MODELOS_IS_ALBUM_IMAGENES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_ALBUM_IMAGENES))
#define GRAPH_MEDIA_MODELOS_ALBUM_IMAGENES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_ALBUM_IMAGENES, GraphMediaModelosAlbumImagenesClass))

typedef struct _GraphMediaModelosAlbumImagenes GraphMediaModelosAlbumImagenes;
typedef struct _GraphMediaModelosAlbumImagenesClass GraphMediaModelosAlbumImagenesClass;
typedef struct _GraphMediaModelosAlbumImagenesPrivate GraphMediaModelosAlbumImagenesPrivate;

#define GRAPH_MEDIA_MODELOS_TYPE_EPOCA (graph_media_modelos_epoca_get_type ())
typedef struct _GraphMediaModelosEpoca GraphMediaModelosEpoca;
typedef struct _GraphMediaModelosAlbumsImagenesPrivate GraphMediaModelosAlbumsImagenesPrivate;
typedef struct _GraphMediaModelosAlbumCancionesPrivate GraphMediaModelosAlbumCancionesPrivate;
typedef struct _GraphMediaModelosAlbumsMusicalesPrivate GraphMediaModelosAlbumsMusicalesPrivate;

#define GRAPH_MEDIA_MODELOS_TYPE_SENTIMIENTO (graph_media_modelos_sentimiento_get_type ())
#define GRAPH_MEDIA_MODELOS_SENTIMIENTO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_MODELOS_TYPE_SENTIMIENTO, GraphMediaModelosSentimiento))
#define GRAPH_MEDIA_MODELOS_SENTIMIENTO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_MODELOS_TYPE_SENTIMIENTO, GraphMediaModelosSentimientoClass))
#define GRAPH_MEDIA_MODELOS_IS_SENTIMIENTO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_MODELOS_TYPE_SENTIMIENTO))
#define GRAPH_MEDIA_MODELOS_IS_SENTIMIENTO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_MODELOS_TYPE_SENTIMIENTO))
#define GRAPH_MEDIA_MODELOS_SENTIMIENTO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_MODELOS_TYPE_SENTIMIENTO, GraphMediaModelosSentimientoClass))

typedef struct _GraphMediaModelosSentimiento GraphMediaModelosSentimiento;
typedef struct _GraphMediaModelosSentimientoClass GraphMediaModelosSentimientoClass;
typedef struct _GraphMediaModelosSentimientoPrivate GraphMediaModelosSentimientoPrivate;
typedef struct _GraphMediaModelosSentimientosPrivate GraphMediaModelosSentimientosPrivate;

#define GRAPH_MEDIA_TYPE_GENERADOR (graph_media_generador_get_type ())
#define GRAPH_MEDIA_GENERADOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAPH_MEDIA_TYPE_GENERADOR, GraphMediaGenerador))
#define GRAPH_MEDIA_GENERADOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRAPH_MEDIA_TYPE_GENERADOR, GraphMediaGeneradorClass))
#define GRAPH_MEDIA_IS_GENERADOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAPH_MEDIA_TYPE_GENERADOR))
#define GRAPH_MEDIA_IS_GENERADOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAPH_MEDIA_TYPE_GENERADOR))
#define GRAPH_MEDIA_GENERADOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAPH_MEDIA_TYPE_GENERADOR, GraphMediaGeneradorClass))

typedef struct _GraphMediaGenerador GraphMediaGenerador;
typedef struct _GraphMediaGeneradorClass GraphMediaGeneradorClass;
typedef struct _GraphMediaGeneradorPrivate GraphMediaGeneradorPrivate;

struct _GraphMediaModelosGraphMediaApp {
	GtkApplication parent_instance;
	GraphMediaModelosGraphMediaAppPrivate * priv;
};

struct _GraphMediaModelosGraphMediaAppClass {
	GtkApplicationClass parent_class;
};

struct _GraphMediaModelosAppGUI {
	GtkApplicationWindow parent_instance;
	GraphMediaModelosAppGUIPrivate * priv;
};

struct _GraphMediaModelosAppGUIClass {
	GtkApplicationWindowClass parent_class;
};

struct _GraphMediaModelosFiltrableIface {
	GTypeInterface parent_iface;
	GtkIconView* (*filtrar) (GraphMediaModelosFiltrable* self, const gchar* consulta, gint lim);
};

struct _GraphMediaModelosAppPreferences {
	GtkDialog parent_instance;
	GraphMediaModelosAppPreferencesPrivate * priv;
};

struct _GraphMediaModelosAppPreferencesClass {
	GtkDialogClass parent_class;
};

struct _GraphMediaModelosDialogo {
	GtkDialog parent_instance;
	GraphMediaModelosDialogoPrivate * priv;
};

struct _GraphMediaModelosDialogoClass {
	GtkDialogClass parent_class;
};

struct _GraphMediaModelosDialogoAlbum {
	GtkDialog parent_instance;
	GraphMediaModelosDialogoAlbumPrivate * priv;
};

struct _GraphMediaModelosDialogoAlbumClass {
	GtkDialogClass parent_class;
};

struct _GraphMediaModelosDialogoArchivo {
	GtkDialog parent_instance;
	GraphMediaModelosDialogoArchivoPrivate * priv;
};

struct _GraphMediaModelosDialogoArchivoClass {
	GtkDialogClass parent_class;
};

struct _GraphMediaBaseDatos {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GraphMediaBaseDatosPrivate * priv;
};

struct _GraphMediaBaseDatosClass {
	GTypeClass parent_class;
	void (*finalize) (GraphMediaBaseDatos *self);
};

typedef enum  {
	GRAPH_MEDIA_MODELOS_ERROR_BASE_DATOS_ARCHIVO_NO_ENCONTRADO,
	GRAPH_MEDIA_MODELOS_ERROR_BASE_DATOS_ARCHIVO_INVALIDO,
	GRAPH_MEDIA_MODELOS_ERROR_BASE_DATOS_CONSULTA
} GraphMediaModelosErrorBaseDatos;
#define GRAPH_MEDIA_MODELOS_ERROR_BASE_DATOS graph_media_modelos_error_base_datos_quark ()
struct _GraphMediaModelosTablas {
	GObject parent_instance;
	GraphMediaModelosTablasPrivate * priv;
	gchar* nombre_tabla;
};

struct _GraphMediaModelosTablasClass {
	GObjectClass parent_class;
};

struct _GraphMediaModelosRelacion {
	GraphMediaModelosTablas parent_instance;
	GraphMediaModelosRelacionPrivate * priv;
	gchar* llave;
	gchar* puerta;
	gchar* tabla_llave;
	gchar* tabla_puerta;
};

struct _GraphMediaModelosRelacionClass {
	GraphMediaModelosTablasClass parent_class;
};

struct _GraphMediaModelosPersona {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GraphMediaModelosPersonaPrivate * priv;
	gint64 id;
	gchar* nombre;
	gchar* rol;
	gint edad;
	gdouble popularidad;
	gchar* nacionalidad;
	gchar* imagen;
};

struct _GraphMediaModelosPersonaClass {
	GTypeClass parent_class;
	void (*finalize) (GraphMediaModelosPersona *self);
};

struct _GraphMediaModelosTablaPersonas {
	GraphMediaModelosTablas parent_instance;
	GraphMediaModelosTablaPersonasPrivate * priv;
};

struct _GraphMediaModelosTablaPersonasClass {
	GraphMediaModelosTablasClass parent_class;
};

struct _GraphMediaModelosPersonaArchivo {
	GraphMediaModelosRelacion parent_instance;
	GraphMediaModelosPersonaArchivoPrivate * priv;
};

struct _GraphMediaModelosPersonaArchivoClass {
	GraphMediaModelosRelacionClass parent_class;
};

typedef enum  {
	GRAPH_MEDIA_MODELOS_ERROR_BD_NO_EXISTE
} GraphMediaModelosErrorBD;
#define GRAPH_MEDIA_MODELOS_ERROR_BD graph_media_modelos_error_bd_quark ()
struct _GraphMediaModelosArtista {
	GraphMediaModelosPersona parent_instance;
	GraphMediaModelosArtistaPrivate * priv;
};

struct _GraphMediaModelosArtistaClass {
	GraphMediaModelosPersonaClass parent_class;
};

struct _GraphMediaModelosArtistas {
	GraphMediaModelosTablaPersonas parent_instance;
	GraphMediaModelosArtistasPrivate * priv;
};

struct _GraphMediaModelosArtistasClass {
	GraphMediaModelosTablaPersonasClass parent_class;
};

typedef enum  {
	GRAPH_MEDIA_MODELOS_ERROR_ARCHIVO_NO_ENCONTRADO
} GraphMediaModelosErrorArchivo;
#define GRAPH_MEDIA_MODELOS_ERROR_ARCHIVO graph_media_modelos_error_archivo_quark ()
struct _GraphMediaModelosArchivo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GraphMediaModelosArchivoPrivate * priv;
	gint64 id;
	gchar* nombre;
	gchar* ubicacion;
	gchar* tipo;
	gchar* u_acceso;
	gdouble popularidad;
	gboolean disponible;
};

struct _GraphMediaModelosArchivoClass {
	GTypeClass parent_class;
	void (*finalize) (GraphMediaModelosArchivo *self);
};

struct _GraphMediaModelosTablaArchivo {
	GraphMediaModelosTablas parent_instance;
	GraphMediaModelosTablaArchivoPrivate * priv;
};

struct _GraphMediaModelosTablaArchivoClass {
	GraphMediaModelosTablasClass parent_class;
};

struct _GraphMediaModelosCancion {
	GraphMediaModelosArchivo parent_instance;
	GraphMediaModelosCancionPrivate * priv;
	gchar* imagen;
};

struct _GraphMediaModelosCancionClass {
	GraphMediaModelosArchivoClass parent_class;
};

struct _GraphMediaModelosCanciones {
	GraphMediaModelosTablaArchivo parent_instance;
	GraphMediaModelosCancionesPrivate * priv;
};

struct _GraphMediaModelosCancionesClass {
	GraphMediaModelosTablaArchivoClass parent_class;
};

struct _GraphMediaModelosImagen {
	GraphMediaModelosArchivo parent_instance;
	GraphMediaModelosImagenPrivate * priv;
};

struct _GraphMediaModelosImagenClass {
	GraphMediaModelosArchivoClass parent_class;
};

struct _GraphMediaModelosImagenes {
	GraphMediaModelosTablaArchivo parent_instance;
	GraphMediaModelosImagenesPrivate * priv;
};

struct _GraphMediaModelosImagenesClass {
	GraphMediaModelosTablaArchivoClass parent_class;
};

struct _GraphMediaModelosAlbum {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GraphMediaModelosAlbumPrivate * priv;
	gint64 id;
	gchar* nombre;
	gchar* descripcion;
};

struct _GraphMediaModelosAlbumClass {
	GTypeClass parent_class;
	void (*finalize) (GraphMediaModelosAlbum *self);
};

struct _GraphMediaModelosEpoca {
	GDateTime* fecha;
};

struct _GraphMediaModelosAlbumImagenes {
	GraphMediaModelosAlbum parent_instance;
	GraphMediaModelosAlbumImagenesPrivate * priv;
	GraphMediaModelosEpoca epoca;
	GeeArrayList* imagenes;
};

struct _GraphMediaModelosAlbumImagenesClass {
	GraphMediaModelosAlbumClass parent_class;
};

struct _GraphMediaModelosAlbumsImagenes {
	GraphMediaModelosTablas parent_instance;
	GraphMediaModelosAlbumsImagenesPrivate * priv;
};

struct _GraphMediaModelosAlbumsImagenesClass {
	GraphMediaModelosTablasClass parent_class;
};

struct _GraphMediaModelosAlbumCanciones {
	GraphMediaModelosAlbum parent_instance;
	GraphMediaModelosAlbumCancionesPrivate * priv;
	GeeArrayList* canciones;
	gchar* caratula;
	gdouble popularidad;
};

struct _GraphMediaModelosAlbumCancionesClass {
	GraphMediaModelosAlbumClass parent_class;
};

struct _GraphMediaModelosAlbumsMusicales {
	GObject parent_instance;
	GraphMediaModelosAlbumsMusicalesPrivate * priv;
};

struct _GraphMediaModelosAlbumsMusicalesClass {
	GObjectClass parent_class;
};

struct _GraphMediaModelosSentimiento {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GraphMediaModelosSentimientoPrivate * priv;
	gint64 id;
	gchar* nombre;
	gchar* descripcion;
};

struct _GraphMediaModelosSentimientoClass {
	GTypeClass parent_class;
	void (*finalize) (GraphMediaModelosSentimiento *self);
};

struct _GraphMediaModelosSentimientos {
	GraphMediaModelosTablas parent_instance;
	GraphMediaModelosSentimientosPrivate * priv;
};

struct _GraphMediaModelosSentimientosClass {
	GraphMediaModelosTablasClass parent_class;
};

struct _GraphMediaGenerador {
	GObject parent_instance;
	GraphMediaGeneradorPrivate * priv;
};

struct _GraphMediaGeneradorClass {
	GObjectClass parent_class;
};


GType graph_media_modelos_graph_media_app_get_type (void) G_GNUC_CONST;
extern gchar* graph_media_modelos_graph_media_app_ubicacion_bd;
GraphMediaModelosGraphMediaApp* graph_media_modelos_graph_media_app_new (void);
GraphMediaModelosGraphMediaApp* graph_media_modelos_graph_media_app_construct (GType object_type);
GType graph_media_modelos_app_gui_get_type (void) G_GNUC_CONST;
extern gint64 graph_media_modelos_app_gui_index_actual;
gpointer graph_media_modelos_persona_ref (gpointer instance);
void graph_media_modelos_persona_unref (gpointer instance);
GParamSpec* graph_media_modelos_param_spec_persona (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void graph_media_modelos_value_set_persona (GValue* value, gpointer v_object);
void graph_media_modelos_value_take_persona (GValue* value, gpointer v_object);
gpointer graph_media_modelos_value_get_persona (const GValue* value);
GType graph_media_modelos_persona_get_type (void) G_GNUC_CONST;
extern GraphMediaModelosPersona* graph_media_modelos_app_gui_persona_actual;
gpointer graph_media_modelos_album_ref (gpointer instance);
void graph_media_modelos_album_unref (gpointer instance);
GParamSpec* graph_media_modelos_param_spec_album (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void graph_media_modelos_value_set_album (GValue* value, gpointer v_object);
void graph_media_modelos_value_take_album (GValue* value, gpointer v_object);
gpointer graph_media_modelos_value_get_album (const GValue* value);
GType graph_media_modelos_album_get_type (void) G_GNUC_CONST;
extern GraphMediaModelosAlbum* graph_media_modelos_app_gui_album_actual;
gpointer graph_media_modelos_archivo_ref (gpointer instance);
void graph_media_modelos_archivo_unref (gpointer instance);
GParamSpec* graph_media_modelos_param_spec_archivo (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void graph_media_modelos_value_set_archivo (GValue* value, gpointer v_object);
void graph_media_modelos_value_take_archivo (GValue* value, gpointer v_object);
gpointer graph_media_modelos_value_get_archivo (const GValue* value);
GType graph_media_modelos_archivo_get_type (void) G_GNUC_CONST;
extern GraphMediaModelosArchivo* graph_media_modelos_app_gui_archivo_actual;
#define GRAPH_MEDIA_MODELOS_APP_GUI_TAM_ICONO 170
GraphMediaModelosAppGUI* graph_media_modelos_app_gui_new (GtkApplication* application);
GraphMediaModelosAppGUI* graph_media_modelos_app_gui_construct (GType object_type, GtkApplication* application);
void graph_media_modelos_app_gui_open (GraphMediaModelosAppGUI* self, GFile* file);
void graph_media_modelos_app_gui_visible_child_changed (GraphMediaModelosAppGUI* self);
void graph_media_modelos_app_gui_search_text_changed (GraphMediaModelosAppGUI* self);
void graph_media_modelos_app_gui_on_previous_clicked (GraphMediaModelosAppGUI* self);
void graph_media_modelos_app_gui_on_next_clicked (GraphMediaModelosAppGUI* self);
void graph_media_modelos_app_gui_musica_registar_cancion (GraphMediaModelosAppGUI* self);
GType graph_media_modelos_filtrable_get_type (void) G_GNUC_CONST;
GtkIconView* graph_media_modelos_filtrable_filtrar (GraphMediaModelosFiltrable* self, const gchar* consulta, gint lim);
GdkPixbuf* graph_media_modelos_filtrable_cargar_icono_ubicacion (GraphMediaModelosFiltrable* self, const gchar* ubicacion, gint h, gint w);
GType graph_media_modelos_app_preferences_get_type (void) G_GNUC_CONST;
GraphMediaModelosAppPreferences* graph_media_modelos_app_preferences_new (GraphMediaModelosAppGUI* window);
GraphMediaModelosAppPreferences* graph_media_modelos_app_preferences_construct (GType object_type, GraphMediaModelosAppGUI* window);
GType graph_media_modelos_dialogo_get_type (void) G_GNUC_CONST;
GraphMediaModelosDialogo* graph_media_modelos_dialogo_new (GraphMediaModelosAppGUI* window, GraphMediaModelosPersona* p, gboolean generico);
GraphMediaModelosDialogo* graph_media_modelos_dialogo_construct (GType object_type, GraphMediaModelosAppGUI* window, GraphMediaModelosPersona* p, gboolean generico);
void graph_media_modelos_dialogo_valida_persona (GraphMediaModelosDialogo* self);
void graph_media_modelos_dialogo_on_cambiar_imagen_clicked (GraphMediaModelosDialogo* self);
GraphMediaModelosPersona* graph_media_modelos_dialogo_get_persona (GraphMediaModelosDialogo* self);
GType graph_media_modelos_dialogo_album_get_type (void) G_GNUC_CONST;
GraphMediaModelosDialogoAlbum* graph_media_modelos_dialogo_album_new (GraphMediaModelosAppGUI* window, GraphMediaModelosAlbum* p, gboolean generico);
GraphMediaModelosDialogoAlbum* graph_media_modelos_dialogo_album_construct (GType object_type, GraphMediaModelosAppGUI* window, GraphMediaModelosAlbum* p, gboolean generico);
void graph_media_modelos_dialogo_album_valida_albums (GraphMediaModelosDialogoAlbum* self);
void graph_media_modelos_dialogo_album_on_cambiar_imagen_clicked (GraphMediaModelosDialogoAlbum* self);
GraphMediaModelosAlbum* graph_media_modelos_dialogo_album_get_albums (GraphMediaModelosDialogoAlbum* self);
GType graph_media_modelos_dialogo_archivo_get_type (void) G_GNUC_CONST;
GraphMediaModelosDialogoArchivo* graph_media_modelos_dialogo_archivo_new (GraphMediaModelosAppGUI* window, GraphMediaModelosArchivo* p, gboolean generico);
GraphMediaModelosDialogoArchivo* graph_media_modelos_dialogo_archivo_construct (GType object_type, GraphMediaModelosAppGUI* window, GraphMediaModelosArchivo* p, gboolean generico);
void graph_media_modelos_dialogo_archivo_valida_archivo (GraphMediaModelosDialogoArchivo* self);
void graph_media_modelos_dialogo_archivo_on_cambiar_imagen_clicked (GraphMediaModelosDialogoArchivo* self);
GraphMediaModelosArchivo* graph_media_modelos_dialogo_archivo_get_archivo (GraphMediaModelosDialogoArchivo* self);
gpointer graph_media_base_datos_ref (gpointer instance);
void graph_media_base_datos_unref (gpointer instance);
GParamSpec* graph_media_param_spec_base_datos (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void graph_media_value_set_base_datos (GValue* value, gpointer v_object);
void graph_media_value_take_base_datos (GValue* value, gpointer v_object);
gpointer graph_media_value_get_base_datos (const GValue* value);
GType graph_media_base_datos_get_type (void) G_GNUC_CONST;
void graph_media_base_datos_seleccionar_archivo (GraphMediaBaseDatos* self, const gchar* archivo);
void graph_media_base_datos_inicializar (GraphMediaBaseDatos* self);
GType graph_media_modelos_tablas_get_type (void) G_GNUC_CONST;
GType graph_media_modelos_tabla_personas_get_type (void) G_GNUC_CONST;
GType graph_media_modelos_artistas_get_type (void) G_GNUC_CONST;
GraphMediaModelosArtistas* graph_media_base_datos_get_artistas (GraphMediaBaseDatos* self);
GType graph_media_modelos_albums_musicales_get_type (void) G_GNUC_CONST;
GraphMediaModelosAlbumsMusicales* graph_media_base_datos_get_albums_musicales (GraphMediaBaseDatos* self);
GType graph_media_modelos_albums_imagenes_get_type (void) G_GNUC_CONST;
GraphMediaModelosAlbumsImagenes* graph_media_base_datos_get_albums_imagenes (GraphMediaBaseDatos* self);
GType graph_media_modelos_sentimientos_get_type (void) G_GNUC_CONST;
GraphMediaModelosSentimientos* graph_media_base_datos_get_sentimientos (GraphMediaBaseDatos* self);
GType graph_media_modelos_tabla_archivo_get_type (void) G_GNUC_CONST;
GType graph_media_modelos_canciones_get_type (void) G_GNUC_CONST;
GraphMediaModelosCanciones* graph_media_base_datos_get_canciones (GraphMediaBaseDatos* self);
GType graph_media_modelos_imagenes_get_type (void) G_GNUC_CONST;
GraphMediaModelosImagenes* graph_media_base_datos_get_imagenes (GraphMediaBaseDatos* self);
GraphMediaBaseDatos* graph_media_base_datos_new (void);
GraphMediaBaseDatos* graph_media_base_datos_construct (GType object_type);
GQuark graph_media_modelos_error_base_datos_quark (void);
extern sqlite3* graph_media_modelos_tablas_bd;
void graph_media_modelos_tablas_inicializar (const gchar* archivo);
gboolean graph_media_modelos_tablas_existe_id (GraphMediaModelosTablas* self, gint64 id);
gboolean graph_media_modelos_tablas_actualizar_celda_por_id (GraphMediaModelosTablas* self, gint64 id, const gchar* columnas);
gboolean graph_media_modelos_tablas_eliminar_celda_por_id (GraphMediaModelosTablas* self, gint64 id);
gint graph_media_modelos_tablas_get_total_celdas (GraphMediaModelosTablas* self, const gchar* columna);
gboolean graph_media_modelos_tablas_insertar_celda (GraphMediaModelosTablas* self, const gchar* columnas, const gchar* valores, sqlite3_stmt** query);
gboolean graph_media_modelos_tablas_buscar_celdas (GraphMediaModelosTablas* self, const gchar* colunmnas, const gchar* condiciones, sqlite3_stmt** query);
void graph_media_modelos_tablas_set_nombre_tabla (GraphMediaModelosTablas* self, const gchar* nombre_tabla);
GraphMediaModelosTablas* graph_media_modelos_tablas_construct (GType object_type);
GType graph_media_modelos_relacion_get_type (void) G_GNUC_CONST;
void graph_media_modelos_relacion_set_tabla_puerta (GraphMediaModelosRelacion* self, const gchar* columna);
void graph_media_modelos_relacion_set_tabla_llave (GraphMediaModelosRelacion* self, const gchar* columna);
void graph_media_modelos_relacion_set_llave (GraphMediaModelosRelacion* self, const gchar* columna);
void graph_media_modelos_relacion_set_puerta (GraphMediaModelosRelacion* self, const gchar* columna);
gboolean graph_media_modelos_relacion_relaciona_ids (GraphMediaModelosRelacion* self, gint64 id1, gint64 id2);
void graph_media_modelos_relacion_eliminar_relaciones_id (GraphMediaModelosRelacion* self, gint64 id);
void graph_media_modelos_relacion_eliminar_relaciones_secundarias_id (GraphMediaModelosRelacion* self, gint64 id);
gboolean graph_media_modelos_relacion_eliminar_relacion (GraphMediaModelosRelacion* self, gint64 id_llave, gint64 id_puerta);
gint graph_media_modelos_relacion_total_relaciones_llave (GraphMediaModelosRelacion* self, gint64 id);
gint graph_media_modelos_relacion_total_relaciones_puerta (GraphMediaModelosRelacion* self, gint64 id);
GraphMediaModelosRelacion* graph_media_modelos_relacion_construct (GType object_type);
GraphMediaModelosPersona* graph_media_modelos_persona_new (void);
GraphMediaModelosPersona* graph_media_modelos_persona_construct (GType object_type);
GType graph_media_modelos_artista_get_type (void) G_GNUC_CONST;
GraphMediaModelosArtista* graph_media_modelos_persona_cast_artista (GraphMediaModelosPersona* p);
gboolean graph_media_modelos_persona_es_valida (GraphMediaModelosPersona* self);
GraphMediaModelosTablaPersonas* graph_media_modelos_tabla_personas_new (void);
GraphMediaModelosTablaPersonas* graph_media_modelos_tabla_personas_construct (GType object_type);
GraphMediaModelosTablaPersonas* graph_media_modelos_tabla_personas_get_instancia (void);
GraphMediaModelosPersona* graph_media_modelos_tabla_personas_agregar (GraphMediaModelosTablaPersonas* self, GraphMediaModelosPersona* persona);
GraphMediaModelosPersona* graph_media_modelos_tabla_personas_eliminar (GraphMediaModelosTablaPersonas* self, GraphMediaModelosPersona* p, GError** error);
gboolean graph_media_modelos_tabla_personas_editar (GraphMediaModelosTablaPersonas* self, GraphMediaModelosPersona* p);
GraphMediaModelosPersona* graph_media_modelos_tabla_personas_get_persona_id (GraphMediaModelosTablaPersonas* self, gint64 id);
gint graph_media_modelos_tabla_personas_get_total_personas (GraphMediaModelosTablaPersonas* self);
GeeArrayList* graph_media_modelos_tabla_personas_get_personas (GraphMediaModelosTablaPersonas* self, const gchar* where, gint limite, const gchar* orden);
GType graph_media_modelos_persona_archivo_get_type (void) G_GNUC_CONST;
GraphMediaModelosPersonaArchivo* graph_media_modelos_persona_archivo_new (void);
GraphMediaModelosPersonaArchivo* graph_media_modelos_persona_archivo_construct (GType object_type);
GraphMediaModelosPersonaArchivo* graph_media_modelos_persona_archivo_get_instancia (void);
void graph_media_modelos_persona_archivo_relaciona (GraphMediaModelosPersonaArchivo* self, GraphMediaModelosPersona* persona, GraphMediaModelosArchivo* cancion);
void graph_media_modelos_persona_archivo_eliminar_relaciones_persona (GraphMediaModelosPersonaArchivo* self, GraphMediaModelosPersona* persona);
void graph_media_modelos_persona_archivo_eliminar_relaciones_archivo (GraphMediaModelosPersonaArchivo* self, GraphMediaModelosArchivo* archivo);
gint graph_media_modelos_persona_archivo_n_archivos_por_persona (GraphMediaModelosPersonaArchivo* self, GraphMediaModelosPersona* persona);
gint graph_media_modelos_persona_archivo_n_personas_por_archivo (GraphMediaModelosPersonaArchivo* self, GraphMediaModelosArchivo* archivo);
GeeArrayList* graph_media_modelos_persona_archivo_archivos_por_persona (GraphMediaModelosPersonaArchivo* self, GraphMediaModelosPersona* p);
GQuark graph_media_modelos_error_bd_quark (void);
GraphMediaModelosArtista* graph_media_modelos_artista_new (void);
GraphMediaModelosArtista* graph_media_modelos_artista_construct (GType object_type);
GraphMediaModelosArtistas* graph_media_modelos_artistas_get_instancia (void);
GraphMediaModelosArtista* graph_media_modelos_artistas_agregar (GraphMediaModelosArtistas* self, GraphMediaModelosArtista* artista);
GraphMediaModelosArtista* graph_media_modelos_artistas_eliminar (GraphMediaModelosArtistas* self, GraphMediaModelosArtista* artista);
gboolean graph_media_modelos_artistas_editar (GraphMediaModelosArtistas* self, GraphMediaModelosArtista* artista);
gint graph_media_modelos_artistas_get_total_artistas (GraphMediaModelosArtistas* self);
GraphMediaModelosArtista* graph_media_modelos_artistas_get_artista_por_id (GraphMediaModelosArtistas* self, gint64 id, GError** error);
GeeArrayList* graph_media_modelos_artistas_buscar_artistas_por_nombre (GraphMediaModelosArtistas* self, const gchar* nombre, gint lim);
GeeArrayList* graph_media_modelos_artistas_get_albums_artista (GraphMediaModelosArtistas* self, GraphMediaModelosArtista* artista);
GType graph_media_modelos_album_canciones_get_type (void) G_GNUC_CONST;
void graph_media_modelos_artistas_agregar_album_artista (GraphMediaModelosArtistas* self, GraphMediaModelosArtista* artista, GraphMediaModelosAlbumCanciones* album);
GQuark graph_media_modelos_error_archivo_quark (void);
GraphMediaModelosArchivo* graph_media_modelos_archivo_new (void);
GraphMediaModelosArchivo* graph_media_modelos_archivo_construct (GType object_type);
void graph_media_modelos_archivo_actualizar_u_acceso (GraphMediaModelosArchivo* self);
GType graph_media_modelos_cancion_get_type (void) G_GNUC_CONST;
GraphMediaModelosCancion* graph_media_modelos_archivo_cast_cancion (GraphMediaModelosArchivo* a);
GType graph_media_modelos_imagen_get_type (void) G_GNUC_CONST;
GraphMediaModelosImagen* graph_media_modelos_archivo_cast_imagen (GraphMediaModelosArchivo* a);
gboolean graph_media_modelos_archivo_es_valido (GraphMediaModelosArchivo* self);
GraphMediaModelosTablaArchivo* graph_media_modelos_tabla_archivo_new (void);
GraphMediaModelosTablaArchivo* graph_media_modelos_tabla_archivo_construct (GType object_type);
GraphMediaModelosTablaArchivo* graph_media_modelos_tabla_archivo_get_instancia (void);
GraphMediaModelosArchivo* graph_media_modelos_tabla_archivo_agregar (GraphMediaModelosTablaArchivo* self, GraphMediaModelosArchivo* archivo);
GraphMediaModelosArchivo* graph_media_modelos_tabla_archivo_eliminar (GraphMediaModelosTablaArchivo* self, GraphMediaModelosArchivo* p, GError** error);
GeeList* graph_media_modelos_tabla_archivo_buscar (GraphMediaModelosTablaArchivo* self, const gchar* where);
gboolean graph_media_modelos_tabla_archivo_editar (GraphMediaModelosTablaArchivo* self, GraphMediaModelosArchivo* p);
GraphMediaModelosArchivo* graph_media_modelos_tabla_archivo_get_archivo_id (GraphMediaModelosTablaArchivo* self, gint64 id);
gint graph_media_modelos_tabla_archivo_get_total_archivos (GraphMediaModelosTablaArchivo* self);
gint graph_media_modelos_tabla_archivo_get_total_tipo (GraphMediaModelosTablaArchivo* self, const gchar* tipo);
GeeArrayList* graph_media_modelos_tabla_archivo_get_archivos (GraphMediaModelosTablaArchivo* self, const gchar* where, gint limite, const gchar* orden);
GraphMediaModelosCancion* graph_media_modelos_cancion_new (void);
GraphMediaModelosCancion* graph_media_modelos_cancion_construct (GType object_type);
GraphMediaModelosCanciones* graph_media_modelos_canciones_get_instancia (void);
GraphMediaModelosCancion* graph_media_modelos_canciones_agregar (GraphMediaModelosCanciones* self, GraphMediaModelosCancion* cancion);
GraphMediaModelosCancion* graph_media_modelos_canciones_eliminar (GraphMediaModelosCanciones* self, GraphMediaModelosCancion* cancion);
gboolean graph_media_modelos_canciones_editar (GraphMediaModelosCanciones* self, GraphMediaModelosCancion* cancion);
gint graph_media_modelos_canciones_get_total_canciones (GraphMediaModelosCanciones* self);
GraphMediaModelosCancion* graph_media_modelos_canciones_get_cancion_por_id (GraphMediaModelosCanciones* self, gint64 id);
GeeArrayList* graph_media_modelos_canciones_buscar_canciones_por_nombre (GraphMediaModelosCanciones* self, const gchar* nombre, gint limite, const gchar* orden);
GraphMediaModelosImagen* graph_media_modelos_imagen_new (void);
GraphMediaModelosImagen* graph_media_modelos_imagen_construct (GType object_type);
GraphMediaModelosImagenes* graph_media_modelos_imagenes_get_instancia (void);
GraphMediaModelosImagen* graph_media_modelos_imagenes_agregar (GraphMediaModelosImagenes* self, GraphMediaModelosImagen* imagen);
GraphMediaModelosImagen* graph_media_modelos_imagenes_eliminar (GraphMediaModelosImagenes* self, GraphMediaModelosImagen* imagen);
gboolean graph_media_modelos_imagenes_editar (GraphMediaModelosImagenes* self, GraphMediaModelosImagen* imagen);
gint graph_media_modelos_imagenes_get_total_imagenes (GraphMediaModelosImagenes* self);
GraphMediaModelosImagen* graph_media_modelos_imagenes_get_imagen_por_id (GraphMediaModelosImagenes* self, gint64 id);
GeeArrayList* graph_media_modelos_imagenes_buscar_imagenes_por_nombre (GraphMediaModelosImagenes* self, const gchar* nombre, gint limite, const gchar* orden);
GraphMediaModelosAlbum* graph_media_modelos_album_construct (GType object_type);
gboolean graph_media_modelos_album_es_valido (GraphMediaModelosAlbum* self);
GType graph_media_modelos_album_imagenes_get_type (void) G_GNUC_CONST;
GraphMediaModelosAlbumImagenes* graph_media_modelos_album_cast_album_imagenes (GraphMediaModelosAlbum* a);
GraphMediaModelosAlbumCanciones* graph_media_modelos_album_cast_album_canciones (GraphMediaModelosAlbum* a);
GType graph_media_modelos_epoca_get_type (void) G_GNUC_CONST;
GraphMediaModelosEpoca* graph_media_modelos_epoca_dup (const GraphMediaModelosEpoca* self);
void graph_media_modelos_epoca_free (GraphMediaModelosEpoca* self);
void graph_media_modelos_epoca_copy (const GraphMediaModelosEpoca* self, GraphMediaModelosEpoca* dest);
void graph_media_modelos_epoca_destroy (GraphMediaModelosEpoca* self);
GraphMediaModelosAlbumImagenes* graph_media_modelos_album_imagenes_new (void);
GraphMediaModelosAlbumImagenes* graph_media_modelos_album_imagenes_construct (GType object_type);
void graph_media_modelos_album_imagenes_agregar_imagen (GraphMediaModelosAlbumImagenes* self, GraphMediaModelosImagen* i);
gboolean graph_media_modelos_album_imagenes_es_valido (GraphMediaModelosAlbumImagenes* self);
GraphMediaModelosAlbumsImagenes* graph_media_modelos_albums_imagenes_get_instancia (void);
GraphMediaModelosAlbumImagenes* graph_media_modelos_albums_imagenes_agregar (GraphMediaModelosAlbumsImagenes* self, GraphMediaModelosAlbumImagenes* album);
GraphMediaModelosAlbumImagenes* graph_media_modelos_albums_imagenes_eliminar (GraphMediaModelosAlbumsImagenes* self, GraphMediaModelosAlbumImagenes* p, GError** error);
GraphMediaModelosAlbumImagenes* graph_media_modelos_albums_imagenes_get_album_por_id (GraphMediaModelosAlbumsImagenes* self, gint64 id);
GeeArrayList* graph_media_modelos_albums_imagenes_buscar_albums_por_nombre (GraphMediaModelosAlbumsImagenes* self, const gchar* nombre, gint lim);
gboolean graph_media_modelos_albums_imagenes_editar (GraphMediaModelosAlbumsImagenes* self, GraphMediaModelosAlbumImagenes* album);
GraphMediaModelosAlbumImagenes* graph_media_modelos_albums_imagenes_get_album_id (GraphMediaModelosAlbumsImagenes* self, gint64 id);
gint graph_media_modelos_albums_imagenes_get_total_albums (GraphMediaModelosAlbumsImagenes* self);
GeeArrayList* graph_media_modelos_albums_imagenes_get_albums (GraphMediaModelosAlbumsImagenes* self, const gchar* where, gint limite, const gchar* orden);
GraphMediaModelosAlbumCanciones* graph_media_modelos_album_canciones_new (void);
GraphMediaModelosAlbumCanciones* graph_media_modelos_album_canciones_construct (GType object_type);
void graph_media_modelos_album_canciones_agregar (GraphMediaModelosAlbumCanciones* self, GraphMediaModelosCancion* c);
GraphMediaModelosAlbumsMusicales* graph_media_modelos_albums_musicales_get_instancia (void);
GraphMediaModelosAlbumCanciones* graph_media_modelos_albums_musicales_registrar (GraphMediaModelosAlbumsMusicales* self, GraphMediaModelosAlbumCanciones* ac);
GraphMediaModelosAlbumCanciones* graph_media_modelos_albums_musicales_eliminar (GraphMediaModelosAlbumsMusicales* self, GraphMediaModelosAlbumCanciones* ac);
gboolean graph_media_modelos_albums_musicales_editar (GraphMediaModelosAlbumsMusicales* self, GraphMediaModelosAlbumCanciones* ac);
void graph_media_modelos_albums_musicales_llenar_album_canciones (GraphMediaModelosAlbumsMusicales* self, GraphMediaModelosAlbumCanciones** ac);
gint graph_media_modelos_albums_musicales_get_total_albums (GraphMediaModelosAlbumsMusicales* self);
GraphMediaModelosAlbumCanciones* graph_media_modelos_albums_musicales_get_album_por_id (GraphMediaModelosAlbumsMusicales* self, gint64 id);
GeeArrayList* graph_media_modelos_albums_musicales_buscar_albums_por_nombre (GraphMediaModelosAlbumsMusicales* self, const gchar* nombre, gint lim);
gboolean graph_media_modelos_albums_musicales_agregar_cancion_album (GraphMediaModelosAlbumsMusicales* self, GraphMediaModelosCancion* c, GraphMediaModelosAlbumCanciones* album);
gboolean graph_media_modelos_albums_musicales_eliminar_cancion_album (GraphMediaModelosAlbumsMusicales* self, GraphMediaModelosCancion* c, GraphMediaModelosAlbumCanciones* album);
void graph_media_modelos_epoca_init (GraphMediaModelosEpoca *self, gint dia, gint mes, gint anio);
void graph_media_modelos_epoca_init_cadena (GraphMediaModelosEpoca *self, const gchar* iso8601);
gboolean graph_media_modelos_epoca_mismo_anio (GraphMediaModelosEpoca *self, GraphMediaModelosEpoca* b);
gboolean graph_media_modelos_epoca_mismo_mes (GraphMediaModelosEpoca *self, GraphMediaModelosEpoca* b);
gboolean graph_media_modelos_epoca_mismo_dia (GraphMediaModelosEpoca *self, GraphMediaModelosEpoca* b);
gchar* graph_media_modelos_epoca_to_string (GraphMediaModelosEpoca *self);
gpointer graph_media_modelos_sentimiento_ref (gpointer instance);
void graph_media_modelos_sentimiento_unref (gpointer instance);
GParamSpec* graph_media_modelos_param_spec_sentimiento (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void graph_media_modelos_value_set_sentimiento (GValue* value, gpointer v_object);
void graph_media_modelos_value_take_sentimiento (GValue* value, gpointer v_object);
gpointer graph_media_modelos_value_get_sentimiento (const GValue* value);
GType graph_media_modelos_sentimiento_get_type (void) G_GNUC_CONST;
GraphMediaModelosSentimiento* graph_media_modelos_sentimiento_new (void);
GraphMediaModelosSentimiento* graph_media_modelos_sentimiento_construct (GType object_type);
gboolean graph_media_modelos_sentimiento_es_valido (GraphMediaModelosSentimiento* self);
GraphMediaModelosSentimientos* graph_media_modelos_sentimientos_get_instancia (void);
GraphMediaModelosSentimiento* graph_media_modelos_sentimientos_agregar (GraphMediaModelosSentimientos* self, GraphMediaModelosSentimiento* sentimiento);
GraphMediaModelosSentimiento* graph_media_modelos_sentimientos_eliminar (GraphMediaModelosSentimientos* self, GraphMediaModelosSentimiento* p, GError** error);
gboolean graph_media_modelos_sentimientos_editar (GraphMediaModelosSentimientos* self, GraphMediaModelosSentimiento* sentimiento);
gint graph_media_modelos_sentimientos_get_total_sentimientos (GraphMediaModelosSentimientos* self);
GraphMediaModelosSentimiento* graph_media_modelos_sentimientos_get_sentimiento_por_id (GraphMediaModelosSentimientos* self, gint64 id);
GeeArrayList* graph_media_modelos_sentimientos_lista_sentimientos (GraphMediaModelosSentimientos* self);
GType graph_media_generador_get_type (void) G_GNUC_CONST;
GraphMediaGenerador* graph_media_generador_new (const gchar* ruta_diccionario);
GraphMediaGenerador* graph_media_generador_construct (GType object_type, const gchar* ruta_diccionario);
gchar* graph_media_generador_palabra_aleatoria (GraphMediaGenerador* self);
gchar* graph_media_generador_ruta_aleatoria (GraphMediaGenerador* self, gint longitud);
gchar* graph_media_generador_nombre_aleatorio (GraphMediaGenerador* self, gint longitud);
gint graph_media_generador_edad_aleatoria (GraphMediaGenerador* self);
gchar* graph_media_generador_rol_aleatorio (GraphMediaGenerador* self);
GraphMediaModelosPersona* graph_media_generador_persona_aleatoria (GraphMediaGenerador* self);
GraphMediaModelosArtista* graph_media_generador_artista_aleatorio (GraphMediaGenerador* self);
GraphMediaModelosAlbumImagenes* graph_media_generador_album_imagenes_aleatorio (GraphMediaGenerador* self, gint imagenes);
GraphMediaModelosAlbumCanciones* graph_media_generador_album_canciones_aleatorio (GraphMediaGenerador* self);
GraphMediaModelosCancion* graph_media_generador_cancion_aleatoria (GraphMediaGenerador* self);
GraphMediaModelosImagen* graph_media_generador_imagen_aleatoria (GraphMediaGenerador* self);
GraphMediaModelosSentimiento* graph_media_generador_sentimiento_aleatorio (GraphMediaGenerador* self);
GdkPixbuf* graph_media_generador_imagen_aleatoria_real (GraphMediaGenerador* self, gint h, gint w);
gchar* graph_media_generador_caratula_aleatoria (void);


G_END_DECLS

#endif
